// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/expenses": {
            "post": {
                "description": "Register a expense into the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "expenses"
                ],
                "summary": "Create an expense",
                "parameters": [
                    {
                        "description": "Expense to be created",
                        "name": "create_expense",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/expenses.CreateExpenseInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.Expense"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/expenses/to_paid": {
            "post": {
                "description": "Change a expense is_paid status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "expenses"
                ],
                "summary": "Set expense to paid",
                "parameters": [
                    {
                        "description": "ID to change to is paid",
                        "name": "expense_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/expenses.SetExpenseToPaidInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/health_check": {
            "get": {
                "description": "It does a ping to db and returns service version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "healt check"
                ],
                "summary": "Checks service health",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/controllers.HealthCheckOutput"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/controllers.HealthCheckOutput"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/recurrent_expenses": {
            "post": {
                "description": "Register into db a recurrent expense",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurrent expenses"
                ],
                "summary": "Create a recurrent expense",
                "parameters": [
                    {
                        "description": "Recurrent Expense",
                        "name": "recurrent_expense",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/recurrentexpenses.CreateRecurrentExpenseInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/recurrent_expenses/all": {
            "get": {
                "description": "Finds all recurrent expenses registered in db",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurrent expenses"
                ],
                "summary": "Get all recurrent expense",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/recurrent_expenses/monthly_expenses": {
            "post": {
                "description": "Register expenses from all recurrent expenses for current month",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurrent expenses"
                ],
                "summary": "Create expenses from all recurrent expenses into db",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reports/current_month": {
            "get": {
                "description": "Generates current month general details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get current month details",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.HealthCheckOutput": {
            "type": "object",
            "properties": {
                "no_sqldb_status": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "entities.Expense": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "day": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_paid": {
                    "type": "boolean"
                },
                "is_recurrent": {
                    "type": "boolean"
                },
                "month": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "expenses.CreateExpenseInput": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "for_next_month": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "expenses.SetExpenseToPaidInput": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "recurrentexpenses.CreateRecurrentExpenseInput": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Expenses API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
