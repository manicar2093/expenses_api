definitions:
  auth.LoginOutput:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/auth.UserData'
    type: object
  auth.RefreshTokenInput:
    properties:
      refresh_token:
        type: string
      userAgent:
        type: string
    type: object
  auth.UserData:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  controllers.HealthCheckOutput:
    properties:
      db_status:
        type: string
      version:
        type: string
    type: object
  entities.Expense:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        $ref: '#/definitions/null.String'
      id:
        type: string
      is_paid:
        type: boolean
      name:
        $ref: '#/definitions/null.String'
      recurrent_expense:
        $ref: '#/definitions/entities.RecurrentExpense'
      recurrent_expense_id:
        $ref: '#/definitions/uuid.NullUUID'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entities.User'
      user_id:
        type: string
    type: object
  entities.Income:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        $ref: '#/definitions/goption.Optional-time_Time'
      user_id:
        $ref: '#/definitions/goption.Optional-uuid_UUID'
    required:
    - name
    - user_id
    type: object
  entities.RecurrentExpense:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        $ref: '#/definitions/null.String'
      expenses:
        items:
          $ref: '#/definitions/entities.Expense'
        type: array
      id:
        type: string
      name:
        type: string
      periodicity:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entities.User'
      user_id:
        type: string
    required:
    - amount
    - name
    - user_id
    type: object
  entities.Session:
    properties:
      client_ip:
        type: string
      created_at:
        type: string
      id:
        type: string
      user:
        $ref: '#/definitions/entities.User'
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  entities.User:
    properties:
      avatar:
        $ref: '#/definitions/null.String'
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      lastname:
        $ref: '#/definitions/null.String'
      name:
        $ref: '#/definitions/null.String'
      sessions:
        items:
          $ref: '#/definitions/entities.Session'
        type: array
      updated_at:
        type: string
    type: object
  expenses.CreateExpenseInput:
    properties:
      amount:
        type: number
      description:
        type: string
      for_next_month:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    required:
    - amount
    - name
    type: object
  expenses.SetExpenseToPaidInput:
    properties:
      id:
        type: string
    type: object
  expenses.ToggleExpenseIsPaidInput:
    properties:
      id:
        type: string
    type: object
  expenses.ToggleExpenseIsPaidOutput:
    properties:
      current_is_paid_status:
        type: boolean
      id:
        type: string
    type: object
  expenses.UpdateExpenseInput:
    properties:
      amount:
        type: number
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  goption.Optional-time_Time:
    type: object
  goption.Optional-uuid_UUID:
    type: object
  incomes.CreateIncomeInput:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        $ref: '#/definitions/goption.Optional-time_Time'
      user_id:
        $ref: '#/definitions/goption.Optional-uuid_UUID'
    required:
    - name
    - user_id
    type: object
  null.String:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  uuid.NullUUID:
    properties:
      uuid:
        type: string
      valid:
        description: Valid is true if UUID is not NULL
        type: boolean
    type: object
  validator.ValidationError:
    properties:
      errors: {}
    type: object
info:
  contact: {}
  title: Expenses API
  version: "1.0"
paths:
  /auth/login/google:
    post:
      consumes:
      - application/json
      description: Creates a new session by token
      parameters:
      - description: Token generated by google oauth
        in: body
        name: google_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access information
          schema:
            $ref: '#/definitions/auth.LoginOutput'
        "500":
          description: Something unidentified has occurred
      summary: Creates a new session by token
      tags:
      - login google
  /auth/refresh_token:
    put:
      consumes:
      - application/json
      description: Creates a new access token by session token
      parameters:
      - description: Session info
        in: body
        name: session_refresh
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: Access information
          schema:
            $ref: '#/definitions/auth.LoginOutput'
        "500":
          description: Something unidentified has occurred
      summary: Creates a new access token by session token
      tags:
      - refresh token
  /expenses:
    post:
      consumes:
      - application/json
      description: Register a expense into the database
      parameters:
      - description: Expense to be created
        in: body
        name: expense_to_create
        required: true
        schema:
          $ref: '#/definitions/expenses.CreateExpenseInput'
      produces:
      - application/json
      responses:
        "201":
          description: Expense has been created
          schema:
            $ref: '#/definitions/entities.Expense'
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Something unidentified has occurred
      security:
      - ApiKeyAuth: []
      summary: Create an expense
      tags:
      - expenses
  /expenses/to_paid:
    put:
      consumes:
      - application/json
      description: Change a expense is_paid status
      parameters:
      - description: ID to change to is paid
        in: body
        name: expense_id
        required: true
        schema:
          $ref: '#/definitions/expenses.SetExpenseToPaidInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Set expense to paid
      tags:
      - expenses
  /expenses/toggle_is_paid:
    put:
      consumes:
      - application/json
      description: Toggle is paid status from an expense
      parameters:
      - description: ID to toggle is paid status
        in: body
        name: expense_id
        required: true
        schema:
          $ref: '#/definitions/expenses.ToggleExpenseIsPaidInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/expenses.ToggleExpenseIsPaidOutput'
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Toggle is paid status from an expense
      tags:
      - expenses
  /expenses/update:
    put:
      consumes:
      - application/json
      description: Updates an expense data depending if it is recurrent or not
      parameters:
      - description: ID to toggle is paid status
        in: body
        name: expense_update_data
        required: true
        schema:
          $ref: '#/definitions/expenses.UpdateExpenseInput'
      produces:
      - application/json
      responses:
        "200":
          description: Expense was updated
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Updates an expense
      tags:
      - expenses
  /health_check:
    get:
      description: It does a ping to db and returns service version
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controllers.HealthCheckOutput'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controllers.HealthCheckOutput'
        "500":
          description: Internal Server Error
      summary: Checks service health
      tags:
      - healt check
  /incomes:
    post:
      consumes:
      - application/json
      description: Register a income into the database
      parameters:
      - description: Income to be created
        in: body
        name: expense_to_create
        required: true
        schema:
          $ref: '#/definitions/incomes.CreateIncomeInput'
      produces:
      - application/json
      responses:
        "201":
          description: Income has been created
          schema:
            $ref: '#/definitions/entities.Income'
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Something unidentified has occurred
      security:
      - ApiKeyAuth: []
      summary: Create an income
      tags:
      - incomes
  /recurrent_expenses:
    post:
      consumes:
      - application/json
      description: Register a recurrent expense into the database
      parameters:
      - description: Expense to be created
        in: body
        name: expense_to_create
        required: true
        schema:
          $ref: '#/definitions/entities.RecurrentExpense'
      produces:
      - application/json
      responses:
        "201":
          description: Expense has been created
          schema:
            $ref: '#/definitions/entities.RecurrentExpense'
        "400":
          description: When a request does not fulfill need data
          schema:
            $ref: '#/definitions/validator.ValidationError'
        "500":
          description: Something unidentified has occurred
      security:
      - ApiKeyAuth: []
      summary: Create a recurrent expense
      tags:
      - recurrent expenses
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" and then your API Token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
