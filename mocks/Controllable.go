// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Controllable is an autogenerated mock type for the Controllable type
type Controllable struct {
	mock.Mock
}

type Controllable_Expecter struct {
	mock *mock.Mock
}

func (_m *Controllable) EXPECT() *Controllable_Expecter {
	return &Controllable_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields:
func (_m *Controllable) Register() {
	_m.Called()
}

// Controllable_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Controllable_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *Controllable_Expecter) Register() *Controllable_Register_Call {
	return &Controllable_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *Controllable_Register_Call) Run(run func()) *Controllable_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controllable_Register_Call) Return() *Controllable_Register_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewControllable interface {
	mock.TestingT
	Cleanup(func())
}

// NewControllable creates a new instance of Controllable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewControllable(t mockConstructorTestingTNewControllable) *Controllable {
	mock := &Controllable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
