// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ExpensePeriodicityIsPaidToggable is an autogenerated mock type for the ExpensePeriodicityIsPaidToggable type
type ExpensePeriodicityIsPaidToggable struct {
	mock.Mock
}

type ExpensePeriodicityIsPaidToggable_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensePeriodicityIsPaidToggable) EXPECT() *ExpensePeriodicityIsPaidToggable_Expecter {
	return &ExpensePeriodicityIsPaidToggable_Expecter{mock: &_m.Mock}
}

// ToggleExpenseIsPaidStatus provides a mock function with given fields: ctx, recurrentExpenseID, expenseID, newIsPaidStatus
func (_m *ExpensePeriodicityIsPaidToggable) ToggleExpenseIsPaidStatus(ctx context.Context, recurrentExpenseID primitive.ObjectID, expenseID primitive.ObjectID, newIsPaidStatus bool) (*entities.RecurrentExpensesMonthlyCreated, error) {
	ret := _m.Called(ctx, recurrentExpenseID, expenseID, newIsPaidStatus)

	var r0 *entities.RecurrentExpensesMonthlyCreated
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, bool) *entities.RecurrentExpensesMonthlyCreated); ok {
		r0 = rf(ctx, recurrentExpenseID, expenseID, newIsPaidStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RecurrentExpensesMonthlyCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID, bool) error); ok {
		r1 = rf(ctx, recurrentExpenseID, expenseID, newIsPaidStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleExpenseIsPaidStatus'
type ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call struct {
	*mock.Call
}

// ToggleExpenseIsPaidStatus is a helper method to define mock.On call
//  - ctx context.Context
//  - recurrentExpenseID primitive.ObjectID
//  - expenseID primitive.ObjectID
//  - newIsPaidStatus bool
func (_e *ExpensePeriodicityIsPaidToggable_Expecter) ToggleExpenseIsPaidStatus(ctx interface{}, recurrentExpenseID interface{}, expenseID interface{}, newIsPaidStatus interface{}) *ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call {
	return &ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call{Call: _e.mock.On("ToggleExpenseIsPaidStatus", ctx, recurrentExpenseID, expenseID, newIsPaidStatus)}
}

func (_c *ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call) Run(run func(ctx context.Context, recurrentExpenseID primitive.ObjectID, expenseID primitive.ObjectID, newIsPaidStatus bool)) *ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID), args[2].(primitive.ObjectID), args[3].(bool))
	})
	return _c
}

func (_c *ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call) Return(_a0 *entities.RecurrentExpensesMonthlyCreated, _a1 error) *ExpensePeriodicityIsPaidToggable_ToggleExpenseIsPaidStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
