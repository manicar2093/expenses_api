// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// ExpensePeriodicityAddable is an autogenerated mock type for the ExpensePeriodicityAddable type
type ExpensePeriodicityAddable struct {
	mock.Mock
}

type ExpensePeriodicityAddable_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensePeriodicityAddable) EXPECT() *ExpensePeriodicityAddable_Expecter {
	return &ExpensePeriodicityAddable_Expecter{mock: &_m.Mock}
}

// AddRecurrentExpense provides a mock function with given fields: ctx, month, year, recurrentExpense
func (_m *ExpensePeriodicityAddable) AddRecurrentExpense(ctx context.Context, month uint, year uint, recurrentExpense *entities.RecurrentExpense) (*entities.RecurrentExpensesMonthlyCreated, error) {
	ret := _m.Called(ctx, month, year, recurrentExpense)

	var r0 *entities.RecurrentExpensesMonthlyCreated
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, *entities.RecurrentExpense) *entities.RecurrentExpensesMonthlyCreated); ok {
		r0 = rf(ctx, month, year, recurrentExpense)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RecurrentExpensesMonthlyCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, *entities.RecurrentExpense) error); ok {
		r1 = rf(ctx, month, year, recurrentExpense)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensePeriodicityAddable_AddRecurrentExpense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecurrentExpense'
type ExpensePeriodicityAddable_AddRecurrentExpense_Call struct {
	*mock.Call
}

// AddRecurrentExpense is a helper method to define mock.On call
//  - ctx context.Context
//  - month uint
//  - year uint
//  - recurrentExpense *entities.RecurrentExpense
func (_e *ExpensePeriodicityAddable_Expecter) AddRecurrentExpense(ctx interface{}, month interface{}, year interface{}, recurrentExpense interface{}) *ExpensePeriodicityAddable_AddRecurrentExpense_Call {
	return &ExpensePeriodicityAddable_AddRecurrentExpense_Call{Call: _e.mock.On("AddRecurrentExpense", ctx, month, year, recurrentExpense)}
}

func (_c *ExpensePeriodicityAddable_AddRecurrentExpense_Call) Run(run func(ctx context.Context, month uint, year uint, recurrentExpense *entities.RecurrentExpense)) *ExpensePeriodicityAddable_AddRecurrentExpense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint), args[3].(*entities.RecurrentExpense))
	})
	return _c
}

func (_c *ExpensePeriodicityAddable_AddRecurrentExpense_Call) Return(_a0 *entities.RecurrentExpensesMonthlyCreated, _a1 error) *ExpensePeriodicityAddable_AddRecurrentExpense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
