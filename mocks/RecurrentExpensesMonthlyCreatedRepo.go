// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// RecurrentExpensesMonthlyCreatedRepo is an autogenerated mock type for the RecurrentExpensesMonthlyCreatedRepo type
type RecurrentExpensesMonthlyCreatedRepo struct {
	mock.Mock
}

type RecurrentExpensesMonthlyCreatedRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpensesMonthlyCreatedRepo) EXPECT() *RecurrentExpensesMonthlyCreatedRepo_Expecter {
	return &RecurrentExpensesMonthlyCreatedRepo_Expecter{mock: &_m.Mock}
}

// FindByMonthAndYear provides a mock function with given fields: ctx, month, year
func (_m *RecurrentExpensesMonthlyCreatedRepo) FindByMonthAndYear(ctx context.Context, month uint, year uint) (*entities.RecurrentExpensesMonthlyCreated, error) {
	ret := _m.Called(ctx, month, year)

	var r0 *entities.RecurrentExpensesMonthlyCreated
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) *entities.RecurrentExpensesMonthlyCreated); ok {
		r0 = rf(ctx, month, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RecurrentExpensesMonthlyCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByMonthAndYear'
type RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call struct {
	*mock.Call
}

// FindByMonthAndYear is a helper method to define mock.On call
//  - ctx context.Context
//  - month uint
//  - year uint
func (_e *RecurrentExpensesMonthlyCreatedRepo_Expecter) FindByMonthAndYear(ctx interface{}, month interface{}, year interface{}) *RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call {
	return &RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call{Call: _e.mock.On("FindByMonthAndYear", ctx, month, year)}
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call) Run(run func(ctx context.Context, month uint, year uint)) *RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call) Return(_a0 *entities.RecurrentExpensesMonthlyCreated, _a1 error) *RecurrentExpensesMonthlyCreatedRepo_FindByMonthAndYear_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, recurrentExpense
func (_m *RecurrentExpensesMonthlyCreatedRepo) Save(ctx context.Context, recurrentExpense *entities.RecurrentExpensesMonthlyCreated) error {
	ret := _m.Called(ctx, recurrentExpense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RecurrentExpensesMonthlyCreated) error); ok {
		r0 = rf(ctx, recurrentExpense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecurrentExpensesMonthlyCreatedRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RecurrentExpensesMonthlyCreatedRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - recurrentExpense *entities.RecurrentExpensesMonthlyCreated
func (_e *RecurrentExpensesMonthlyCreatedRepo_Expecter) Save(ctx interface{}, recurrentExpense interface{}) *RecurrentExpensesMonthlyCreatedRepo_Save_Call {
	return &RecurrentExpensesMonthlyCreatedRepo_Save_Call{Call: _e.mock.On("Save", ctx, recurrentExpense)}
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_Save_Call) Run(run func(ctx context.Context, recurrentExpense *entities.RecurrentExpensesMonthlyCreated)) *RecurrentExpensesMonthlyCreatedRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RecurrentExpensesMonthlyCreated))
	})
	return _c
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_Save_Call) Return(_a0 error) *RecurrentExpensesMonthlyCreatedRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: ctx, recurrentExpense
func (_m *RecurrentExpensesMonthlyCreatedRepo) Update(ctx context.Context, recurrentExpense *entities.RecurrentExpensesMonthlyCreated) error {
	ret := _m.Called(ctx, recurrentExpense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RecurrentExpensesMonthlyCreated) error); ok {
		r0 = rf(ctx, recurrentExpense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecurrentExpensesMonthlyCreatedRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RecurrentExpensesMonthlyCreatedRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - recurrentExpense *entities.RecurrentExpensesMonthlyCreated
func (_e *RecurrentExpensesMonthlyCreatedRepo_Expecter) Update(ctx interface{}, recurrentExpense interface{}) *RecurrentExpensesMonthlyCreatedRepo_Update_Call {
	return &RecurrentExpensesMonthlyCreatedRepo_Update_Call{Call: _e.mock.On("Update", ctx, recurrentExpense)}
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_Update_Call) Run(run func(ctx context.Context, recurrentExpense *entities.RecurrentExpensesMonthlyCreated)) *RecurrentExpensesMonthlyCreatedRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RecurrentExpensesMonthlyCreated))
	})
	return _c
}

func (_c *RecurrentExpensesMonthlyCreatedRepo_Update_Call) Return(_a0 error) *RecurrentExpensesMonthlyCreatedRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}
