// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	expenses "github.com/manicar2093/expenses_api/internal/expenses"
	mock "github.com/stretchr/testify/mock"
)

// SetExpenseToPaid is an autogenerated mock type for the SetExpenseToPaid type
type SetExpenseToPaid struct {
	mock.Mock
}

type SetExpenseToPaid_Expecter struct {
	mock *mock.Mock
}

func (_m *SetExpenseToPaid) EXPECT() *SetExpenseToPaid_Expecter {
	return &SetExpenseToPaid_Expecter{mock: &_m.Mock}
}

// SetToPaid provides a mock function with given fields: ctx, input
func (_m *SetExpenseToPaid) SetToPaid(ctx context.Context, input *expenses.SetExpenseToPaidInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.SetExpenseToPaidInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetExpenseToPaid_SetToPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToPaid'
type SetExpenseToPaid_SetToPaid_Call struct {
	*mock.Call
}

// SetToPaid is a helper method to define mock.On call
//  - ctx context.Context
//  - input *expenses.SetExpenseToPaidInput
func (_e *SetExpenseToPaid_Expecter) SetToPaid(ctx interface{}, input interface{}) *SetExpenseToPaid_SetToPaid_Call {
	return &SetExpenseToPaid_SetToPaid_Call{Call: _e.mock.On("SetToPaid", ctx, input)}
}

func (_c *SetExpenseToPaid_SetToPaid_Call) Run(run func(ctx context.Context, input *expenses.SetExpenseToPaidInput)) *SetExpenseToPaid_SetToPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.SetExpenseToPaidInput))
	})
	return _c
}

func (_c *SetExpenseToPaid_SetToPaid_Call) Return(_a0 error) *SetExpenseToPaid_SetToPaid_Call {
	_c.Call.Return(_a0)
	return _c
}
