// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/manicar2093/expenses_api/internal/auth"
	mock "github.com/stretchr/testify/mock"
)

// Tokenizable is an autogenerated mock type for the Tokenizable type
type Tokenizable struct {
	mock.Mock
}

type Tokenizable_Expecter struct {
	mock *mock.Mock
}

func (_m *Tokenizable) EXPECT() *Tokenizable_Expecter {
	return &Tokenizable_Expecter{mock: &_m.Mock}
}

// CreateAccessToken provides a mock function with given fields: tokenDetails
func (_m *Tokenizable) CreateAccessToken(tokenDetails *auth.AccessToken) (*auth.TokenInfo, error) {
	ret := _m.Called(tokenDetails)

	var r0 *auth.TokenInfo
	if rf, ok := ret.Get(0).(func(*auth.AccessToken) *auth.TokenInfo); ok {
		r0 = rf(tokenDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*auth.AccessToken) error); ok {
		r1 = rf(tokenDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokenizable_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type Tokenizable_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - tokenDetails *auth.AccessToken
func (_e *Tokenizable_Expecter) CreateAccessToken(tokenDetails interface{}) *Tokenizable_CreateAccessToken_Call {
	return &Tokenizable_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", tokenDetails)}
}

func (_c *Tokenizable_CreateAccessToken_Call) Run(run func(tokenDetails *auth.AccessToken)) *Tokenizable_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auth.AccessToken))
	})
	return _c
}

func (_c *Tokenizable_CreateAccessToken_Call) Return(_a0 *auth.TokenInfo, _a1 error) *Tokenizable_CreateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: tokenDetails
func (_m *Tokenizable) CreateRefreshToken(tokenDetails *auth.RefreshToken) (*auth.TokenInfo, error) {
	ret := _m.Called(tokenDetails)

	var r0 *auth.TokenInfo
	if rf, ok := ret.Get(0).(func(*auth.RefreshToken) *auth.TokenInfo); ok {
		r0 = rf(tokenDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*auth.RefreshToken) error); ok {
		r1 = rf(tokenDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokenizable_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type Tokenizable_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - tokenDetails *auth.RefreshToken
func (_e *Tokenizable_Expecter) CreateRefreshToken(tokenDetails interface{}) *Tokenizable_CreateRefreshToken_Call {
	return &Tokenizable_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", tokenDetails)}
}

func (_c *Tokenizable_CreateRefreshToken_Call) Run(run func(tokenDetails *auth.RefreshToken)) *Tokenizable_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*auth.RefreshToken))
	})
	return _c
}

func (_c *Tokenizable_CreateRefreshToken_Call) Return(_a0 *auth.TokenInfo, _a1 error) *Tokenizable_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTokenizable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenizable creates a new instance of Tokenizable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenizable(t mockConstructorTestingTNewTokenizable) *Tokenizable {
	mock := &Tokenizable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
