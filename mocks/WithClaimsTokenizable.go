// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// WithClaimsTokenizable is an autogenerated mock type for the WithClaimsTokenizable type
type WithClaimsTokenizable struct {
	mock.Mock
}

type WithClaimsTokenizable_Expecter struct {
	mock *mock.Mock
}

func (_m *WithClaimsTokenizable) EXPECT() *WithClaimsTokenizable_Expecter {
	return &WithClaimsTokenizable_Expecter{mock: &_m.Mock}
}

// CreateTokenWithClaims provides a mock function with given fields: expiresAt, claims
func (_m *WithClaimsTokenizable) CreateTokenWithClaims(expiresAt time.Time, claims map[string]interface{}) (string, error) {
	ret := _m.Called(expiresAt, claims)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time, map[string]interface{}) string); ok {
		r0 = rf(expiresAt, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, map[string]interface{}) error); ok {
		r1 = rf(expiresAt, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithClaimsTokenizable_CreateTokenWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTokenWithClaims'
type WithClaimsTokenizable_CreateTokenWithClaims_Call struct {
	*mock.Call
}

// CreateTokenWithClaims is a helper method to define mock.On call
//  - expiresAt time.Time
//  - claims map[string]interface{}
func (_e *WithClaimsTokenizable_Expecter) CreateTokenWithClaims(expiresAt interface{}, claims interface{}) *WithClaimsTokenizable_CreateTokenWithClaims_Call {
	return &WithClaimsTokenizable_CreateTokenWithClaims_Call{Call: _e.mock.On("CreateTokenWithClaims", expiresAt, claims)}
}

func (_c *WithClaimsTokenizable_CreateTokenWithClaims_Call) Run(run func(expiresAt time.Time, claims map[string]interface{})) *WithClaimsTokenizable_CreateTokenWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *WithClaimsTokenizable_CreateTokenWithClaims_Call) Return(_a0 string, _a1 error) *WithClaimsTokenizable_CreateTokenWithClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
