// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// RecurrentExpenseRepo is an autogenerated mock type for the RecurrentExpenseRepo type
type RecurrentExpenseRepo struct {
	mock.Mock
}

type RecurrentExpenseRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpenseRepo) EXPECT() *RecurrentExpenseRepo_Expecter {
	return &RecurrentExpenseRepo_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: ctx
func (_m *RecurrentExpenseRepo) FindAll(ctx context.Context) ([]*entities.RecurrentExpense, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.RecurrentExpense
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.RecurrentExpense); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.RecurrentExpense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpenseRepo_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type RecurrentExpenseRepo_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//  - ctx context.Context
func (_e *RecurrentExpenseRepo_Expecter) FindAll(ctx interface{}) *RecurrentExpenseRepo_FindAll_Call {
	return &RecurrentExpenseRepo_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *RecurrentExpenseRepo_FindAll_Call) Run(run func(ctx context.Context)) *RecurrentExpenseRepo_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RecurrentExpenseRepo_FindAll_Call) Return(_a0 []*entities.RecurrentExpense, _a1 error) *RecurrentExpenseRepo_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *RecurrentExpenseRepo) FindByName(ctx context.Context, name string) (*entities.RecurrentExpense, error) {
	ret := _m.Called(ctx, name)

	var r0 *entities.RecurrentExpense
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.RecurrentExpense); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RecurrentExpense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpenseRepo_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type RecurrentExpenseRepo_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
func (_e *RecurrentExpenseRepo_Expecter) FindByName(ctx interface{}, name interface{}) *RecurrentExpenseRepo_FindByName_Call {
	return &RecurrentExpenseRepo_FindByName_Call{Call: _e.mock.On("FindByName", ctx, name)}
}

func (_c *RecurrentExpenseRepo_FindByName_Call) Run(run func(ctx context.Context, name string)) *RecurrentExpenseRepo_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecurrentExpenseRepo_FindByName_Call) Return(_a0 *entities.RecurrentExpense, _a1 error) *RecurrentExpenseRepo_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, recExpense
func (_m *RecurrentExpenseRepo) Save(ctx context.Context, recExpense *entities.RecurrentExpense) error {
	ret := _m.Called(ctx, recExpense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RecurrentExpense) error); ok {
		r0 = rf(ctx, recExpense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecurrentExpenseRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RecurrentExpenseRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - recExpense *entities.RecurrentExpense
func (_e *RecurrentExpenseRepo_Expecter) Save(ctx interface{}, recExpense interface{}) *RecurrentExpenseRepo_Save_Call {
	return &RecurrentExpenseRepo_Save_Call{Call: _e.mock.On("Save", ctx, recExpense)}
}

func (_c *RecurrentExpenseRepo_Save_Call) Run(run func(ctx context.Context, recExpense *entities.RecurrentExpense)) *RecurrentExpenseRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RecurrentExpense))
	})
	return _c
}

func (_c *RecurrentExpenseRepo_Save_Call) Return(_a0 error) *RecurrentExpenseRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}
