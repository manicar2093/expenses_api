// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	expenses "github.com/manicar2093/expenses_api/internal/expenses"

	mock "github.com/stretchr/testify/mock"
)

// ExpenseSevice is an autogenerated mock type for the ExpenseSevice type
type ExpenseSevice struct {
	mock.Mock
}

type ExpenseSevice_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpenseSevice) EXPECT() *ExpenseSevice_Expecter {
	return &ExpenseSevice_Expecter{mock: &_m.Mock}
}

// CreateExpense provides a mock function with given fields: _a0, _a1
func (_m *ExpenseSevice) CreateExpense(_a0 context.Context, _a1 *expenses.CreateExpenseInput) (*entities.Expense, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.CreateExpenseInput) *entities.Expense); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *expenses.CreateExpenseInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpenseSevice_CreateExpense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExpense'
type ExpenseSevice_CreateExpense_Call struct {
	*mock.Call
}

// CreateExpense is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *expenses.CreateExpenseInput
func (_e *ExpenseSevice_Expecter) CreateExpense(_a0 interface{}, _a1 interface{}) *ExpenseSevice_CreateExpense_Call {
	return &ExpenseSevice_CreateExpense_Call{Call: _e.mock.On("CreateExpense", _a0, _a1)}
}

func (_c *ExpenseSevice_CreateExpense_Call) Run(run func(_a0 context.Context, _a1 *expenses.CreateExpenseInput)) *ExpenseSevice_CreateExpense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.CreateExpenseInput))
	})
	return _c
}

func (_c *ExpenseSevice_CreateExpense_Call) Return(_a0 *entities.Expense, _a1 error) *ExpenseSevice_CreateExpense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetToPaid provides a mock function with given fields: ctx, input
func (_m *ExpenseSevice) SetToPaid(ctx context.Context, input *expenses.SetExpenseToPaidInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.SetExpenseToPaidInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpenseSevice_SetToPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToPaid'
type ExpenseSevice_SetToPaid_Call struct {
	*mock.Call
}

// SetToPaid is a helper method to define mock.On call
//  - ctx context.Context
//  - input *expenses.SetExpenseToPaidInput
func (_e *ExpenseSevice_Expecter) SetToPaid(ctx interface{}, input interface{}) *ExpenseSevice_SetToPaid_Call {
	return &ExpenseSevice_SetToPaid_Call{Call: _e.mock.On("SetToPaid", ctx, input)}
}

func (_c *ExpenseSevice_SetToPaid_Call) Run(run func(ctx context.Context, input *expenses.SetExpenseToPaidInput)) *ExpenseSevice_SetToPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.SetExpenseToPaidInput))
	})
	return _c
}

func (_c *ExpenseSevice_SetToPaid_Call) Return(_a0 error) *ExpenseSevice_SetToPaid_Call {
	_c.Call.Return(_a0)
	return _c
}

// ToggleIsPaid provides a mock function with given fields: ctx, input
func (_m *ExpenseSevice) ToggleIsPaid(ctx context.Context, input *expenses.ToggleExpenseIsPaidInput) (*expenses.ToggleExpenseIsPaidOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 *expenses.ToggleExpenseIsPaidOutput
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.ToggleExpenseIsPaidInput) *expenses.ToggleExpenseIsPaidOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expenses.ToggleExpenseIsPaidOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *expenses.ToggleExpenseIsPaidInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpenseSevice_ToggleIsPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleIsPaid'
type ExpenseSevice_ToggleIsPaid_Call struct {
	*mock.Call
}

// ToggleIsPaid is a helper method to define mock.On call
//  - ctx context.Context
//  - input *expenses.ToggleExpenseIsPaidInput
func (_e *ExpenseSevice_Expecter) ToggleIsPaid(ctx interface{}, input interface{}) *ExpenseSevice_ToggleIsPaid_Call {
	return &ExpenseSevice_ToggleIsPaid_Call{Call: _e.mock.On("ToggleIsPaid", ctx, input)}
}

func (_c *ExpenseSevice_ToggleIsPaid_Call) Run(run func(ctx context.Context, input *expenses.ToggleExpenseIsPaidInput)) *ExpenseSevice_ToggleIsPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.ToggleExpenseIsPaidInput))
	})
	return _c
}

func (_c *ExpenseSevice_ToggleIsPaid_Call) Return(_a0 *expenses.ToggleExpenseIsPaidOutput, _a1 error) *ExpenseSevice_ToggleIsPaid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateExpense provides a mock function with given fields: _a0, _a1
func (_m *ExpenseSevice) UpdateExpense(_a0 context.Context, _a1 *expenses.UpdateExpenseInput) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.UpdateExpenseInput) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpenseSevice_UpdateExpense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExpense'
type ExpenseSevice_UpdateExpense_Call struct {
	*mock.Call
}

// UpdateExpense is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *expenses.UpdateExpenseInput
func (_e *ExpenseSevice_Expecter) UpdateExpense(_a0 interface{}, _a1 interface{}) *ExpenseSevice_UpdateExpense_Call {
	return &ExpenseSevice_UpdateExpense_Call{Call: _e.mock.On("UpdateExpense", _a0, _a1)}
}

func (_c *ExpenseSevice_UpdateExpense_Call) Run(run func(_a0 context.Context, _a1 *expenses.UpdateExpenseInput)) *ExpenseSevice_UpdateExpense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.UpdateExpenseInput))
	})
	return _c
}

func (_c *ExpenseSevice_UpdateExpense_Call) Return(_a0 error) *ExpenseSevice_UpdateExpense_Call {
	_c.Call.Return(_a0)
	return _c
}
