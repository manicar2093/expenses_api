// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	periodizer "github.com/manicar2093/expenses_api/internal/periodicity/periodizer"

	time "time"
)

// PeriodicityAction is an autogenerated mock type for the PeriodicityAction type
type PeriodicityAction struct {
	mock.Mock
}

type PeriodicityAction_Expecter struct {
	mock *mock.Mock
}

func (_m *PeriodicityAction) EXPECT() *PeriodicityAction_Expecter {
	return &PeriodicityAction_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *PeriodicityAction) Execute(_a0 uint, _a1 time.Time, _a2 *entities.RecurrentExpense, _a3 periodizer.TimeValidatorFunc) ([]*entities.Expense, bool) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*entities.Expense
	if rf, ok := ret.Get(0).(func(uint, time.Time, *entities.RecurrentExpense, periodizer.TimeValidatorFunc) []*entities.Expense); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Expense)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uint, time.Time, *entities.RecurrentExpense, periodizer.TimeValidatorFunc) bool); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PeriodicityAction_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type PeriodicityAction_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 uint
//  - _a1 time.Time
//  - _a2 *entities.RecurrentExpense
//  - _a3 periodizer.TimeValidatorFunc
func (_e *PeriodicityAction_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *PeriodicityAction_Execute_Call {
	return &PeriodicityAction_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2, _a3)}
}

func (_c *PeriodicityAction_Execute_Call) Run(run func(_a0 uint, _a1 time.Time, _a2 *entities.RecurrentExpense, _a3 periodizer.TimeValidatorFunc)) *PeriodicityAction_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(time.Time), args[2].(*entities.RecurrentExpense), args[3].(periodizer.TimeValidatorFunc))
	})
	return _c
}

func (_c *PeriodicityAction_Execute_Call) Return(_a0 []*entities.Expense, _a1 bool) *PeriodicityAction_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
