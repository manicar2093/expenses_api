// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	incomes "github.com/manicar2093/expenses_api/internal/incomes"
	mock "github.com/stretchr/testify/mock"

	mongoentities "github.com/manicar2093/expenses_api/internal/entities/mongoentities"
)

// CreateIncome is an autogenerated mock type for the CreateIncome type
type CreateIncome struct {
	mock.Mock
}

type CreateIncome_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateIncome) EXPECT() *CreateIncome_Expecter {
	return &CreateIncome_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, incomeInput
func (_m *CreateIncome) Create(ctx context.Context, incomeInput *incomes.CreateIncomeInput) (*mongoentities.Income, error) {
	ret := _m.Called(ctx, incomeInput)

	var r0 *mongoentities.Income
	if rf, ok := ret.Get(0).(func(context.Context, *incomes.CreateIncomeInput) *mongoentities.Income); ok {
		r0 = rf(ctx, incomeInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongoentities.Income)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *incomes.CreateIncomeInput) error); ok {
		r1 = rf(ctx, incomeInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIncome_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CreateIncome_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - incomeInput *incomes.CreateIncomeInput
func (_e *CreateIncome_Expecter) Create(ctx interface{}, incomeInput interface{}) *CreateIncome_Create_Call {
	return &CreateIncome_Create_Call{Call: _e.mock.On("Create", ctx, incomeInput)}
}

func (_c *CreateIncome_Create_Call) Run(run func(ctx context.Context, incomeInput *incomes.CreateIncomeInput)) *CreateIncome_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*incomes.CreateIncomeInput))
	})
	return _c
}

func (_c *CreateIncome_Create_Call) Return(_a0 *mongoentities.Income, _a1 error) *CreateIncome_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
