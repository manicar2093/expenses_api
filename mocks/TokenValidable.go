// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenValidable is an autogenerated mock type for the TokenValidable type
type TokenValidable struct {
	mock.Mock
}

type TokenValidable_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenValidable) EXPECT() *TokenValidable_Expecter {
	return &TokenValidable_Expecter{mock: &_m.Mock}
}

// ValidateToken provides a mock function with given fields: ctx, token, output
func (_m *TokenValidable) ValidateToken(ctx context.Context, token string, output interface{}) error {
	ret := _m.Called(ctx, token, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, token, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenValidable_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type TokenValidable_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - output interface{}
func (_e *TokenValidable_Expecter) ValidateToken(ctx interface{}, token interface{}, output interface{}) *TokenValidable_ValidateToken_Call {
	return &TokenValidable_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, token, output)}
}

func (_c *TokenValidable_ValidateToken_Call) Run(run func(ctx context.Context, token string, output interface{})) *TokenValidable_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *TokenValidable_ValidateToken_Call) Return(_a0 error) *TokenValidable_ValidateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTokenValidable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenValidable creates a new instance of TokenValidable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenValidable(t mockConstructorTestingTNewTokenValidable) *TokenValidable {
	mock := &TokenValidable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
