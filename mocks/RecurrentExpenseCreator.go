// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// RecurrentExpenseCreator is an autogenerated mock type for the RecurrentExpenseCreator type
type RecurrentExpenseCreator struct {
	mock.Mock
}

type RecurrentExpenseCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpenseCreator) EXPECT() *RecurrentExpenseCreator_Expecter {
	return &RecurrentExpenseCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, recurrentExpense
func (_m *RecurrentExpenseCreator) Create(ctx context.Context, recurrentExpense *entities.RecurrentExpense) error {
	ret := _m.Called(ctx, recurrentExpense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RecurrentExpense) error); ok {
		r0 = rf(ctx, recurrentExpense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecurrentExpenseCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RecurrentExpenseCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - recurrentExpense *entities.RecurrentExpense
func (_e *RecurrentExpenseCreator_Expecter) Create(ctx interface{}, recurrentExpense interface{}) *RecurrentExpenseCreator_Create_Call {
	return &RecurrentExpenseCreator_Create_Call{Call: _e.mock.On("Create", ctx, recurrentExpense)}
}

func (_c *RecurrentExpenseCreator_Create_Call) Run(run func(ctx context.Context, recurrentExpense *entities.RecurrentExpense)) *RecurrentExpenseCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RecurrentExpense))
	})
	return _c
}

func (_c *RecurrentExpenseCreator_Create_Call) Return(_a0 error) *RecurrentExpenseCreator_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRecurrentExpenseCreator interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecurrentExpenseCreator creates a new instance of RecurrentExpenseCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecurrentExpenseCreator(t mockConstructorTestingTNewRecurrentExpenseCreator) *RecurrentExpenseCreator {
	mock := &RecurrentExpenseCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
