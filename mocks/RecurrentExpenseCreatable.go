// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	recurrentexpenses "github.com/manicar2093/expenses_api/internal/recurrentexpenses"
	mock "github.com/stretchr/testify/mock"
)

// RecurrentExpenseCreatable is an autogenerated mock type for the RecurrentExpenseCreatable type
type RecurrentExpenseCreatable struct {
	mock.Mock
}

type RecurrentExpenseCreatable_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpenseCreatable) EXPECT() *RecurrentExpenseCreatable_Expecter {
	return &RecurrentExpenseCreatable_Expecter{mock: &_m.Mock}
}

// CreateRecurrentExpense provides a mock function with given fields: ctx, input
func (_m *RecurrentExpenseCreatable) CreateRecurrentExpense(ctx context.Context, input *recurrentexpenses.CreateRecurrentExpenseInput) (*recurrentexpenses.CreateRecurrentExpenseOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 *recurrentexpenses.CreateRecurrentExpenseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *recurrentexpenses.CreateRecurrentExpenseInput) *recurrentexpenses.CreateRecurrentExpenseOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recurrentexpenses.CreateRecurrentExpenseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *recurrentexpenses.CreateRecurrentExpenseInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpenseCreatable_CreateRecurrentExpense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRecurrentExpense'
type RecurrentExpenseCreatable_CreateRecurrentExpense_Call struct {
	*mock.Call
}

// CreateRecurrentExpense is a helper method to define mock.On call
//  - ctx context.Context
//  - input *recurrentexpenses.CreateRecurrentExpenseInput
func (_e *RecurrentExpenseCreatable_Expecter) CreateRecurrentExpense(ctx interface{}, input interface{}) *RecurrentExpenseCreatable_CreateRecurrentExpense_Call {
	return &RecurrentExpenseCreatable_CreateRecurrentExpense_Call{Call: _e.mock.On("CreateRecurrentExpense", ctx, input)}
}

func (_c *RecurrentExpenseCreatable_CreateRecurrentExpense_Call) Run(run func(ctx context.Context, input *recurrentexpenses.CreateRecurrentExpenseInput)) *RecurrentExpenseCreatable_CreateRecurrentExpense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*recurrentexpenses.CreateRecurrentExpenseInput))
	})
	return _c
}

func (_c *RecurrentExpenseCreatable_CreateRecurrentExpense_Call) Return(_a0 *recurrentexpenses.CreateRecurrentExpenseOutput, _a1 error) *RecurrentExpenseCreatable_CreateRecurrentExpense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
