// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/manicar2093/expenses_api/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// UserAuthenticable is an autogenerated mock type for the UserAuthenticable type
type UserAuthenticable struct {
	mock.Mock
}

type UserAuthenticable_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAuthenticable) EXPECT() *UserAuthenticable_Expecter {
	return &UserAuthenticable_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserAuthenticable) CreateUser(ctx context.Context, user *auth.UserData) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UserData) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAuthenticable_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserAuthenticable_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *auth.UserData
func (_e *UserAuthenticable_Expecter) CreateUser(ctx interface{}, user interface{}) *UserAuthenticable_CreateUser_Call {
	return &UserAuthenticable_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserAuthenticable_CreateUser_Call) Run(run func(ctx context.Context, user *auth.UserData)) *UserAuthenticable_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*auth.UserData))
	})
	return _c
}

func (_c *UserAuthenticable_CreateUser_Call) Return(_a0 error) *UserAuthenticable_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserAuthenticable) FindUserByEmail(ctx context.Context, email string) (*auth.UserData, error) {
	ret := _m.Called(ctx, email)

	var r0 *auth.UserData
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.UserData); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAuthenticable_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type UserAuthenticable_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserAuthenticable_Expecter) FindUserByEmail(ctx interface{}, email interface{}) *UserAuthenticable_FindUserByEmail_Call {
	return &UserAuthenticable_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", ctx, email)}
}

func (_c *UserAuthenticable_FindUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserAuthenticable_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAuthenticable_FindUserByEmail_Call) Return(_a0 *auth.UserData, _a1 error) *UserAuthenticable_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserAuthenticable interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserAuthenticable creates a new instance of UserAuthenticable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserAuthenticable(t mockConstructorTestingTNewUserAuthenticable) *UserAuthenticable {
	mock := &UserAuthenticable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
