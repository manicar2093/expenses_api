// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	auth "github.com/manicar2093/expenses_api/internal/auth"
	mock "github.com/stretchr/testify/mock"
)

// GoogleLoginable is an autogenerated mock type for the GoogleLoginable type
type GoogleLoginable struct {
	mock.Mock
}

type GoogleLoginable_Expecter struct {
	mock *mock.Mock
}

func (_m *GoogleLoginable) EXPECT() *GoogleLoginable_Expecter {
	return &GoogleLoginable_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: googleSignInToken
func (_m *GoogleLoginable) Login(googleSignInToken string) (*auth.LoginOutput, error) {
	ret := _m.Called(googleSignInToken)

	var r0 *auth.LoginOutput
	if rf, ok := ret.Get(0).(func(string) *auth.LoginOutput); ok {
		r0 = rf(googleSignInToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(googleSignInToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleLoginable_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type GoogleLoginable_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - googleSignInToken string
func (_e *GoogleLoginable_Expecter) Login(googleSignInToken interface{}) *GoogleLoginable_Login_Call {
	return &GoogleLoginable_Login_Call{Call: _e.mock.On("Login", googleSignInToken)}
}

func (_c *GoogleLoginable_Login_Call) Run(run func(googleSignInToken string)) *GoogleLoginable_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GoogleLoginable_Login_Call) Return(_a0 *auth.LoginOutput, _a1 error) *GoogleLoginable_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
