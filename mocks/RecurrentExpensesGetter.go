// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RecurrentExpensesGetter is an autogenerated mock type for the RecurrentExpensesGetter type
type RecurrentExpensesGetter struct {
	mock.Mock
}

type RecurrentExpensesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpensesGetter) EXPECT() *RecurrentExpensesGetter_Expecter {
	return &RecurrentExpensesGetter_Expecter{mock: &_m.Mock}
}

// GetRecurrentExpensesByDate provides a mock function with given fields: date
func (_m *RecurrentExpensesGetter) GetRecurrentExpensesByDate(date time.Time) ([]entities.RecurrentExpense, error) {
	ret := _m.Called(date)

	var r0 []entities.RecurrentExpense
	if rf, ok := ret.Get(0).(func(time.Time) []entities.RecurrentExpense); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RecurrentExpense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecurrentExpensesByDate'
type RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call struct {
	*mock.Call
}

// GetRecurrentExpensesByDate is a helper method to define mock.On call
//   - date time.Time
func (_e *RecurrentExpensesGetter_Expecter) GetRecurrentExpensesByDate(date interface{}) *RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call {
	return &RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call{Call: _e.mock.On("GetRecurrentExpensesByDate", date)}
}

func (_c *RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call) Run(run func(date time.Time)) *RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call) Return(_a0 []entities.RecurrentExpense, _a1 error) *RecurrentExpensesGetter_GetRecurrentExpensesByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRecurrentExpensesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecurrentExpensesGetter creates a new instance of RecurrentExpensesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecurrentExpensesGetter(t mockConstructorTestingTNewRecurrentExpensesGetter) *RecurrentExpensesGetter {
	mock := &RecurrentExpensesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
