// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionsRepo is an autogenerated mock type for the SessionsRepo type
type SessionsRepo struct {
	mock.Mock
}

type SessionsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionsRepo) EXPECT() *SessionsRepo_Expecter {
	return &SessionsRepo_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SessionsRepo) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionsRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionsRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - id uuid.UUID
func (_e *SessionsRepo_Expecter) Delete(ctx interface{}, id interface{}) *SessionsRepo_Delete_Call {
	return &SessionsRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *SessionsRepo_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SessionsRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionsRepo_Delete_Call) Return(_a0 error) *SessionsRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *SessionsRepo) FindByID(ctx context.Context, id uuid.UUID) (*entities.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Session
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionsRepo_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type SessionsRepo_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id uuid.UUID
func (_e *SessionsRepo_Expecter) FindByID(ctx interface{}, id interface{}) *SessionsRepo_FindByID_Call {
	return &SessionsRepo_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *SessionsRepo_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SessionsRepo_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionsRepo_FindByID_Call) Return(_a0 *entities.Session, _a1 error) *SessionsRepo_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, session
func (_m *SessionsRepo) Save(ctx context.Context, session *entities.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionsRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type SessionsRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - session *entities.Session
func (_e *SessionsRepo_Expecter) Save(ctx interface{}, session interface{}) *SessionsRepo_Save_Call {
	return &SessionsRepo_Save_Call{Call: _e.mock.On("Save", ctx, session)}
}

func (_c *SessionsRepo_Save_Call) Run(run func(ctx context.Context, session *entities.Session)) *SessionsRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Session))
	})
	return _c
}

func (_c *SessionsRepo_Save_Call) Return(_a0 error) *SessionsRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}
