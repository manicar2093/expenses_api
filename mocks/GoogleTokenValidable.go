// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	validator "github.com/manicar2093/expenses_api/pkg/validator"
	mock "github.com/stretchr/testify/mock"
)

// GoogleTokenValidable is an autogenerated mock type for the GoogleTokenValidable type
type GoogleTokenValidable struct {
	mock.Mock
}

type GoogleTokenValidable_Expecter struct {
	mock *mock.Mock
}

func (_m *GoogleTokenValidable) EXPECT() *GoogleTokenValidable_Expecter {
	return &GoogleTokenValidable_Expecter{mock: &_m.Mock}
}

// ValidateGoogleToken provides a mock function with given fields: ctx, token
func (_m *GoogleTokenValidable) ValidateGoogleToken(ctx context.Context, token string) (*validator.GoogleTokenClaims, error) {
	ret := _m.Called(ctx, token)

	var r0 *validator.GoogleTokenClaims
	if rf, ok := ret.Get(0).(func(context.Context, string) *validator.GoogleTokenClaims); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.GoogleTokenClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleTokenValidable_ValidateGoogleToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGoogleToken'
type GoogleTokenValidable_ValidateGoogleToken_Call struct {
	*mock.Call
}

// ValidateGoogleToken is a helper method to define mock.On call
//  - ctx context.Context
//  - token string
func (_e *GoogleTokenValidable_Expecter) ValidateGoogleToken(ctx interface{}, token interface{}) *GoogleTokenValidable_ValidateGoogleToken_Call {
	return &GoogleTokenValidable_ValidateGoogleToken_Call{Call: _e.mock.On("ValidateGoogleToken", ctx, token)}
}

func (_c *GoogleTokenValidable_ValidateGoogleToken_Call) Run(run func(ctx context.Context, token string)) *GoogleTokenValidable_ValidateGoogleToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GoogleTokenValidable_ValidateGoogleToken_Call) Return(_a0 *validator.GoogleTokenClaims, _a1 error) *GoogleTokenValidable_ValidateGoogleToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
