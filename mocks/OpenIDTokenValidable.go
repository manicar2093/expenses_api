// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OpenIDTokenValidable is an autogenerated mock type for the OpenIDTokenValidable type
type OpenIDTokenValidable[T interface{}] struct {
	mock.Mock
}

type OpenIDTokenValidable_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *OpenIDTokenValidable[T]) EXPECT() *OpenIDTokenValidable_Expecter[T] {
	return &OpenIDTokenValidable_Expecter[T]{mock: &_m.Mock}
}

// ValidateOpenIDToken provides a mock function with given fields: ctx, token
func (_m *OpenIDTokenValidable[T]) ValidateOpenIDToken(ctx context.Context, token string) (*T, error) {
	ret := _m.Called(ctx, token)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, string) *T); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenIDTokenValidable_ValidateOpenIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOpenIDToken'
type OpenIDTokenValidable_ValidateOpenIDToken_Call[T interface{}] struct {
	*mock.Call
}

// ValidateOpenIDToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *OpenIDTokenValidable_Expecter[T]) ValidateOpenIDToken(ctx interface{}, token interface{}) *OpenIDTokenValidable_ValidateOpenIDToken_Call[T] {
	return &OpenIDTokenValidable_ValidateOpenIDToken_Call[T]{Call: _e.mock.On("ValidateOpenIDToken", ctx, token)}
}

func (_c *OpenIDTokenValidable_ValidateOpenIDToken_Call[T]) Run(run func(ctx context.Context, token string)) *OpenIDTokenValidable_ValidateOpenIDToken_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OpenIDTokenValidable_ValidateOpenIDToken_Call[T]) Return(_a0 *T, _a1 error) *OpenIDTokenValidable_ValidateOpenIDToken_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewOpenIDTokenValidable interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenIDTokenValidable creates a new instance of OpenIDTokenValidable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenIDTokenValidable[T interface{}](t mockConstructorTestingTNewOpenIDTokenValidable) *OpenIDTokenValidable[T] {
	mock := &OpenIDTokenValidable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
