// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// ExpensesCountByRecurrentExpensePeriodicityGenerable is an autogenerated mock type for the ExpensesCountByRecurrentExpensePeriodicityGenerable type
type ExpensesCountByRecurrentExpensePeriodicityGenerable struct {
	mock.Mock
}

type ExpensesCountByRecurrentExpensePeriodicityGenerable_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensesCountByRecurrentExpensePeriodicityGenerable) EXPECT() *ExpensesCountByRecurrentExpensePeriodicityGenerable_Expecter {
	return &ExpensesCountByRecurrentExpensePeriodicityGenerable_Expecter{mock: &_m.Mock}
}

// GenerateExpensesCountByRecurrentExpensePeriodicity provides a mock function with given fields: ctx, recurrentExpense
func (_m *ExpensesCountByRecurrentExpensePeriodicityGenerable) GenerateExpensesCountByRecurrentExpensePeriodicity(ctx context.Context, recurrentExpense *entities.RecurrentExpense) ([]*entities.Expense, error) {
	ret := _m.Called(ctx, recurrentExpense)

	var r0 []*entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RecurrentExpense) []*entities.Expense); ok {
		r0 = rf(ctx, recurrentExpense)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.RecurrentExpense) error); ok {
		r1 = rf(ctx, recurrentExpense)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateExpensesCountByRecurrentExpensePeriodicity'
type ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call struct {
	*mock.Call
}

// GenerateExpensesCountByRecurrentExpensePeriodicity is a helper method to define mock.On call
//  - ctx context.Context
//  - recurrentExpense *entities.RecurrentExpense
func (_e *ExpensesCountByRecurrentExpensePeriodicityGenerable_Expecter) GenerateExpensesCountByRecurrentExpensePeriodicity(ctx interface{}, recurrentExpense interface{}) *ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call {
	return &ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call{Call: _e.mock.On("GenerateExpensesCountByRecurrentExpensePeriodicity", ctx, recurrentExpense)}
}

func (_c *ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call) Run(run func(ctx context.Context, recurrentExpense *entities.RecurrentExpense)) *ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RecurrentExpense))
	})
	return _c
}

func (_c *ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call) Return(_a0 []*entities.Expense, _a1 error) *ExpensesCountByRecurrentExpensePeriodicityGenerable_GenerateExpensesCountByRecurrentExpensePeriodicity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
