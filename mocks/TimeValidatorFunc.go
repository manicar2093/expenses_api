// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TimeValidatorFunc is an autogenerated mock type for the TimeValidatorFunc type
type TimeValidatorFunc struct {
	mock.Mock
}

type TimeValidatorFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *TimeValidatorFunc) EXPECT() *TimeValidatorFunc_Expecter {
	return &TimeValidatorFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *TimeValidatorFunc) Execute(_a0 *time.Time, _a1 *time.Time, _a2 uint) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*time.Time, *time.Time, uint) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TimeValidatorFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TimeValidatorFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 *time.Time
//  - _a1 *time.Time
//  - _a2 uint
func (_e *TimeValidatorFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *TimeValidatorFunc_Execute_Call {
	return &TimeValidatorFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *TimeValidatorFunc_Execute_Call) Run(run func(_a0 *time.Time, _a1 *time.Time, _a2 uint)) *TimeValidatorFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*time.Time), args[1].(*time.Time), args[2].(uint))
	})
	return _c
}

func (_c *TimeValidatorFunc_Execute_Call) Return(_a0 bool) *TimeValidatorFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}
