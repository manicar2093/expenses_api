// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// ExpensesCountRepo is an autogenerated mock type for the ExpensesCountRepo type
type ExpensesCountRepo struct {
	mock.Mock
}

type ExpensesCountRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensesCountRepo) EXPECT() *ExpensesCountRepo_Expecter {
	return &ExpensesCountRepo_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: ctx, expenseCount
func (_m *ExpensesCountRepo) Save(ctx context.Context, expenseCount *entities.ExpensesCount) error {
	ret := _m.Called(ctx, expenseCount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ExpensesCount) error); ok {
		r0 = rf(ctx, expenseCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesCountRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ExpensesCountRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - expenseCount *entities.ExpensesCount
func (_e *ExpensesCountRepo_Expecter) Save(ctx interface{}, expenseCount interface{}) *ExpensesCountRepo_Save_Call {
	return &ExpensesCountRepo_Save_Call{Call: _e.mock.On("Save", ctx, expenseCount)}
}

func (_c *ExpensesCountRepo_Save_Call) Run(run func(ctx context.Context, expenseCount *entities.ExpensesCount)) *ExpensesCountRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.ExpensesCount))
	})
	return _c
}

func (_c *ExpensesCountRepo_Save_Call) Return(_a0 error) *ExpensesCountRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}
