// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "go.mongodb.org/mongo-driver/x/mongo/driver/uuid"
)

// SessionFindable is an autogenerated mock type for the SessionFindable type
type SessionFindable struct {
	mock.Mock
}

type SessionFindable_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionFindable) EXPECT() *SessionFindable_Expecter {
	return &SessionFindable_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *SessionFindable) FindByID(ctx context.Context, id uuid.UUID) (*entities.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Session
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionFindable_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type SessionFindable_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *SessionFindable_Expecter) FindByID(ctx interface{}, id interface{}) *SessionFindable_FindByID_Call {
	return &SessionFindable_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *SessionFindable_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SessionFindable_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionFindable_FindByID_Call) Return(_a0 *entities.Session, _a1 error) *SessionFindable_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSessionFindable interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionFindable creates a new instance of SessionFindable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionFindable(t mockConstructorTestingTNewSessionFindable) *SessionFindable {
	mock := &SessionFindable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
