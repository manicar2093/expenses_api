// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	repos "github.com/manicar2093/expenses_api/internal/repos"

	uuid "github.com/google/uuid"
)

// ExpensesRepository is an autogenerated mock type for the ExpensesRepository type
type ExpensesRepository struct {
	mock.Mock
}

type ExpensesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensesRepository) EXPECT() *ExpensesRepository_Expecter {
	return &ExpensesRepository_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ctx, expenseID
func (_m *ExpensesRepository) FindByID(ctx context.Context, expenseID uuid.UUID) (*entities.Expense, error) {
	ret := _m.Called(ctx, expenseID)

	var r0 *entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Expense); ok {
		r0 = rf(ctx, expenseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, expenseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type ExpensesRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - expenseID uuid.UUID
func (_e *ExpensesRepository_Expecter) FindByID(ctx interface{}, expenseID interface{}) *ExpensesRepository_FindByID_Call {
	return &ExpensesRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, expenseID)}
}

func (_c *ExpensesRepository_FindByID_Call) Run(run func(ctx context.Context, expenseID uuid.UUID)) *ExpensesRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExpensesRepository_FindByID_Call) Return(_a0 *entities.Expense, _a1 error) *ExpensesRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetExpenseStatusByID provides a mock function with given fields: ctx, expenseID
func (_m *ExpensesRepository) GetExpenseStatusByID(ctx context.Context, expenseID uuid.UUID) (*entities.ExpenseIDWithIsPaidStatus, error) {
	ret := _m.Called(ctx, expenseID)

	var r0 *entities.ExpenseIDWithIsPaidStatus
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.ExpenseIDWithIsPaidStatus); ok {
		r0 = rf(ctx, expenseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ExpenseIDWithIsPaidStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, expenseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_GetExpenseStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpenseStatusByID'
type ExpensesRepository_GetExpenseStatusByID_Call struct {
	*mock.Call
}

// GetExpenseStatusByID is a helper method to define mock.On call
//   - ctx context.Context
//   - expenseID uuid.UUID
func (_e *ExpensesRepository_Expecter) GetExpenseStatusByID(ctx interface{}, expenseID interface{}) *ExpensesRepository_GetExpenseStatusByID_Call {
	return &ExpensesRepository_GetExpenseStatusByID_Call{Call: _e.mock.On("GetExpenseStatusByID", ctx, expenseID)}
}

func (_c *ExpensesRepository_GetExpenseStatusByID_Call) Run(run func(ctx context.Context, expenseID uuid.UUID)) *ExpensesRepository_GetExpenseStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExpensesRepository_GetExpenseStatusByID_Call) Return(_a0 *entities.ExpenseIDWithIsPaidStatus, _a1 error) *ExpensesRepository_GetExpenseStatusByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, expense
func (_m *ExpensesRepository) Save(ctx context.Context, expense *entities.Expense) error {
	ret := _m.Called(ctx, expense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ExpensesRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - expense *entities.Expense
func (_e *ExpensesRepository_Expecter) Save(ctx interface{}, expense interface{}) *ExpensesRepository_Save_Call {
	return &ExpensesRepository_Save_Call{Call: _e.mock.On("Save", ctx, expense)}
}

func (_c *ExpensesRepository_Save_Call) Run(run func(ctx context.Context, expense *entities.Expense)) *ExpensesRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Expense))
	})
	return _c
}

func (_c *ExpensesRepository_Save_Call) Return(_a0 error) *ExpensesRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: ctx, expenseUpdateInput
func (_m *ExpensesRepository) Update(ctx context.Context, expenseUpdateInput *repos.UpdateExpenseInput) error {
	ret := _m.Called(ctx, expenseUpdateInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repos.UpdateExpenseInput) error); ok {
		r0 = rf(ctx, expenseUpdateInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ExpensesRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - expenseUpdateInput *repos.UpdateExpenseInput
func (_e *ExpensesRepository_Expecter) Update(ctx interface{}, expenseUpdateInput interface{}) *ExpensesRepository_Update_Call {
	return &ExpensesRepository_Update_Call{Call: _e.mock.On("Update", ctx, expenseUpdateInput)}
}

func (_c *ExpensesRepository_Update_Call) Run(run func(ctx context.Context, expenseUpdateInput *repos.UpdateExpenseInput)) *ExpensesRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*repos.UpdateExpenseInput))
	})
	return _c
}

func (_c *ExpensesRepository_Update_Call) Return(_a0 error) *ExpensesRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateIsPaidByExpenseID provides a mock function with given fields: ctx, expenseID, status
func (_m *ExpensesRepository) UpdateIsPaidByExpenseID(ctx context.Context, expenseID uuid.UUID, status bool) error {
	ret := _m.Called(ctx, expenseID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, expenseID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_UpdateIsPaidByExpenseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIsPaidByExpenseID'
type ExpensesRepository_UpdateIsPaidByExpenseID_Call struct {
	*mock.Call
}

// UpdateIsPaidByExpenseID is a helper method to define mock.On call
//   - ctx context.Context
//   - expenseID uuid.UUID
//   - status bool
func (_e *ExpensesRepository_Expecter) UpdateIsPaidByExpenseID(ctx interface{}, expenseID interface{}, status interface{}) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	return &ExpensesRepository_UpdateIsPaidByExpenseID_Call{Call: _e.mock.On("UpdateIsPaidByExpenseID", ctx, expenseID, status)}
}

func (_c *ExpensesRepository_UpdateIsPaidByExpenseID_Call) Run(run func(ctx context.Context, expenseID uuid.UUID, status bool)) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *ExpensesRepository_UpdateIsPaidByExpenseID_Call) Return(_a0 error) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewExpensesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpensesRepository creates a new instance of ExpensesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpensesRepository(t mockConstructorTestingTNewExpensesRepository) *ExpensesRepository {
	mock := &ExpensesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
