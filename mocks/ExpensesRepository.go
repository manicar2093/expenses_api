// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	schemas "github.com/manicar2093/expenses_api/internal/schemas"

	time "time"

	uuid "github.com/google/uuid"
)

// ExpensesRepository is an autogenerated mock type for the ExpensesRepository type
type ExpensesRepository struct {
	mock.Mock
}

type ExpensesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensesRepository) EXPECT() *ExpensesRepository_Expecter {
	return &ExpensesRepository_Expecter{mock: &_m.Mock}
}

// FindByNameAndMonthAndIsRecurrent provides a mock function with given fields: ctx, month, expenseName
func (_m *ExpensesRepository) FindByNameAndMonthAndIsRecurrent(ctx context.Context, month uint, expenseName string) (*entities.Expense, error) {
	ret := _m.Called(ctx, month, expenseName)

	var r0 *entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) *entities.Expense); ok {
		r0 = rf(ctx, month, expenseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, month, expenseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNameAndMonthAndIsRecurrent'
type ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call struct {
	*mock.Call
}

// FindByNameAndMonthAndIsRecurrent is a helper method to define mock.On call
//  - ctx context.Context
//  - month uint
//  - expenseName string
func (_e *ExpensesRepository_Expecter) FindByNameAndMonthAndIsRecurrent(ctx interface{}, month interface{}, expenseName interface{}) *ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call {
	return &ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call{Call: _e.mock.On("FindByNameAndMonthAndIsRecurrent", ctx, month, expenseName)}
}

func (_c *ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call) Run(run func(ctx context.Context, month uint, expenseName string)) *ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call) Return(_a0 *entities.Expense, _a1 error) *ExpensesRepository_FindByNameAndMonthAndIsRecurrent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetExpenseStatusByID provides a mock function with given fields: ctx, expenseID
func (_m *ExpensesRepository) GetExpenseStatusByID(ctx context.Context, expenseID uuid.UUID) (*schemas.ExpenseIDWithIsPaidStatus, error) {
	ret := _m.Called(ctx, expenseID)

	var r0 *schemas.ExpenseIDWithIsPaidStatus
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *schemas.ExpenseIDWithIsPaidStatus); ok {
		r0 = rf(ctx, expenseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ExpenseIDWithIsPaidStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, expenseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_GetExpenseStatusByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpenseStatusByID'
type ExpensesRepository_GetExpenseStatusByID_Call struct {
	*mock.Call
}

// GetExpenseStatusByID is a helper method to define mock.On call
//  - ctx context.Context
//  - expenseID uuid.UUID
func (_e *ExpensesRepository_Expecter) GetExpenseStatusByID(ctx interface{}, expenseID interface{}) *ExpensesRepository_GetExpenseStatusByID_Call {
	return &ExpensesRepository_GetExpenseStatusByID_Call{Call: _e.mock.On("GetExpenseStatusByID", ctx, expenseID)}
}

func (_c *ExpensesRepository_GetExpenseStatusByID_Call) Run(run func(ctx context.Context, expenseID uuid.UUID)) *ExpensesRepository_GetExpenseStatusByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExpensesRepository_GetExpenseStatusByID_Call) Return(_a0 *schemas.ExpenseIDWithIsPaidStatus, _a1 error) *ExpensesRepository_GetExpenseStatusByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetExpensesByMonth provides a mock function with given fields: ctx, month
func (_m *ExpensesRepository) GetExpensesByMonth(ctx context.Context, month time.Month) ([]*entities.Expense, error) {
	ret := _m.Called(ctx, month)

	var r0 []*entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context, time.Month) []*entities.Expense); ok {
		r0 = rf(ctx, month)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Month) error); ok {
		r1 = rf(ctx, month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_GetExpensesByMonth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpensesByMonth'
type ExpensesRepository_GetExpensesByMonth_Call struct {
	*mock.Call
}

// GetExpensesByMonth is a helper method to define mock.On call
//  - ctx context.Context
//  - month time.Month
func (_e *ExpensesRepository_Expecter) GetExpensesByMonth(ctx interface{}, month interface{}) *ExpensesRepository_GetExpensesByMonth_Call {
	return &ExpensesRepository_GetExpensesByMonth_Call{Call: _e.mock.On("GetExpensesByMonth", ctx, month)}
}

func (_c *ExpensesRepository_GetExpensesByMonth_Call) Run(run func(ctx context.Context, month time.Month)) *ExpensesRepository_GetExpensesByMonth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Month))
	})
	return _c
}

func (_c *ExpensesRepository_GetExpensesByMonth_Call) Return(_a0 []*entities.Expense, _a1 error) *ExpensesRepository_GetExpensesByMonth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, expense
func (_m *ExpensesRepository) Save(ctx context.Context, expense *entities.Expense) error {
	ret := _m.Called(ctx, expense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ExpensesRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - expense *entities.Expense
func (_e *ExpensesRepository_Expecter) Save(ctx interface{}, expense interface{}) *ExpensesRepository_Save_Call {
	return &ExpensesRepository_Save_Call{Call: _e.mock.On("Save", ctx, expense)}
}

func (_c *ExpensesRepository_Save_Call) Run(run func(ctx context.Context, expense *entities.Expense)) *ExpensesRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Expense))
	})
	return _c
}

func (_c *ExpensesRepository_Save_Call) Return(_a0 error) *ExpensesRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateIsPaidByExpenseID provides a mock function with given fields: ctx, expenseID, status
func (_m *ExpensesRepository) UpdateIsPaidByExpenseID(ctx context.Context, expenseID uuid.UUID, status bool) error {
	ret := _m.Called(ctx, expenseID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, expenseID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_UpdateIsPaidByExpenseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIsPaidByExpenseID'
type ExpensesRepository_UpdateIsPaidByExpenseID_Call struct {
	*mock.Call
}

// UpdateIsPaidByExpenseID is a helper method to define mock.On call
//  - ctx context.Context
//  - expenseID uuid.UUID
//  - status bool
func (_e *ExpensesRepository_Expecter) UpdateIsPaidByExpenseID(ctx interface{}, expenseID interface{}, status interface{}) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	return &ExpensesRepository_UpdateIsPaidByExpenseID_Call{Call: _e.mock.On("UpdateIsPaidByExpenseID", ctx, expenseID, status)}
}

func (_c *ExpensesRepository_UpdateIsPaidByExpenseID_Call) Run(run func(ctx context.Context, expenseID uuid.UUID, status bool)) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *ExpensesRepository_UpdateIsPaidByExpenseID_Call) Return(_a0 error) *ExpensesRepository_UpdateIsPaidByExpenseID_Call {
	_c.Call.Return(_a0)
	return _c
}
