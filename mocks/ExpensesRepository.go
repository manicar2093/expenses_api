// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// ExpensesRepository is an autogenerated mock type for the ExpensesRepository type
type ExpensesRepository struct {
	mock.Mock
}

type ExpensesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpensesRepository) EXPECT() *ExpensesRepository_Expecter {
	return &ExpensesRepository_Expecter{mock: &_m.Mock}
}

// GetCurrentMonthExpenses provides a mock function with given fields: ctx
func (_m *ExpensesRepository) GetCurrentMonthExpenses(ctx context.Context) (*[]entities.Expense, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Expense
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.Expense); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Expense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpensesRepository_GetCurrentMonthExpenses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentMonthExpenses'
type ExpensesRepository_GetCurrentMonthExpenses_Call struct {
	*mock.Call
}

// GetCurrentMonthExpenses is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ExpensesRepository_Expecter) GetCurrentMonthExpenses(ctx interface{}) *ExpensesRepository_GetCurrentMonthExpenses_Call {
	return &ExpensesRepository_GetCurrentMonthExpenses_Call{Call: _e.mock.On("GetCurrentMonthExpenses", ctx)}
}

func (_c *ExpensesRepository_GetCurrentMonthExpenses_Call) Run(run func(ctx context.Context)) *ExpensesRepository_GetCurrentMonthExpenses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExpensesRepository_GetCurrentMonthExpenses_Call) Return(_a0 *[]entities.Expense, _a1 error) *ExpensesRepository_GetCurrentMonthExpenses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, expense
func (_m *ExpensesRepository) Save(ctx context.Context, expense *entities.Expense) error {
	ret := _m.Called(ctx, expense)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpensesRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ExpensesRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - expense *entities.Expense
func (_e *ExpensesRepository_Expecter) Save(ctx interface{}, expense interface{}) *ExpensesRepository_Save_Call {
	return &ExpensesRepository_Save_Call{Call: _e.mock.On("Save", ctx, expense)}
}

func (_c *ExpensesRepository_Save_Call) Run(run func(ctx context.Context, expense *entities.Expense)) *ExpensesRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Expense))
	})
	return _c
}

func (_c *ExpensesRepository_Save_Call) Return(_a0 error) *ExpensesRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}
