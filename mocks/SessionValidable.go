// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manicar2093/expenses_api/internal/entities"
	mock "github.com/stretchr/testify/mock"

	sessions "github.com/manicar2093/expenses_api/internal/sessions"
)

// SessionValidable is an autogenerated mock type for the SessionValidable type
type SessionValidable struct {
	mock.Mock
}

type SessionValidable_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionValidable) EXPECT() *SessionValidable_Expecter {
	return &SessionValidable_Expecter{mock: &_m.Mock}
}

// ValidateSession provides a mock function with given fields: ctx, validationInput
func (_m *SessionValidable) ValidateSession(ctx context.Context, validationInput *sessions.SessionValidationInput) (*entities.Session, error) {
	ret := _m.Called(ctx, validationInput)

	var r0 *entities.Session
	if rf, ok := ret.Get(0).(func(context.Context, *sessions.SessionValidationInput) *entities.Session); ok {
		r0 = rf(ctx, validationInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sessions.SessionValidationInput) error); ok {
		r1 = rf(ctx, validationInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionValidable_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type SessionValidable_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - validationInput *sessions.SessionValidationInput
func (_e *SessionValidable_Expecter) ValidateSession(ctx interface{}, validationInput interface{}) *SessionValidable_ValidateSession_Call {
	return &SessionValidable_ValidateSession_Call{Call: _e.mock.On("ValidateSession", ctx, validationInput)}
}

func (_c *SessionValidable_ValidateSession_Call) Run(run func(ctx context.Context, validationInput *sessions.SessionValidationInput)) *SessionValidable_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sessions.SessionValidationInput))
	})
	return _c
}

func (_c *SessionValidable_ValidateSession_Call) Return(_a0 *entities.Session, _a1 error) *SessionValidable_ValidateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSessionValidable interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionValidable creates a new instance of SessionValidable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionValidable(t mockConstructorTestingTNewSessionValidable) *SessionValidable {
	mock := &SessionValidable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
