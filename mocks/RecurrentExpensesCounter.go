// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// RecurrentExpensesCounter is an autogenerated mock type for the RecurrentExpensesCounter type
type RecurrentExpensesCounter struct {
	mock.Mock
}

type RecurrentExpensesCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *RecurrentExpensesCounter) EXPECT() *RecurrentExpensesCounter_Expecter {
	return &RecurrentExpensesCounter_Expecter{mock: &_m.Mock}
}

// CountRecurrentExpensesByDateAndID provides a mock function with given fields: date, recurrentExpenseID
func (_m *RecurrentExpensesCounter) CountRecurrentExpensesByDateAndID(date time.Time, recurrentExpenseID uuid.UUID) (int64, error) {
	ret := _m.Called(date, recurrentExpenseID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(time.Time, uuid.UUID) int64); ok {
		r0 = rf(date, recurrentExpenseID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, uuid.UUID) error); ok {
		r1 = rf(date, recurrentExpenseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRecurrentExpensesByDateAndID'
type RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call struct {
	*mock.Call
}

// CountRecurrentExpensesByDateAndID is a helper method to define mock.On call
//   - date time.Time
//   - recurrentExpenseID uuid.UUID
func (_e *RecurrentExpensesCounter_Expecter) CountRecurrentExpensesByDateAndID(date interface{}, recurrentExpenseID interface{}) *RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call {
	return &RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call{Call: _e.mock.On("CountRecurrentExpensesByDateAndID", date, recurrentExpenseID)}
}

func (_c *RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call) Run(run func(date time.Time, recurrentExpenseID uuid.UUID)) *RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call) Return(_a0 int64, _a1 error) *RecurrentExpensesCounter_CountRecurrentExpensesByDateAndID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRecurrentExpensesCounter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecurrentExpensesCounter creates a new instance of RecurrentExpensesCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecurrentExpensesCounter(t mockConstructorTestingTNewRecurrentExpensesCounter) *RecurrentExpensesCounter {
	mock := &RecurrentExpensesCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
