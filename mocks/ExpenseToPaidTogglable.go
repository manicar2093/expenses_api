// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	expenses "github.com/manicar2093/expenses_api/internal/expenses"
	mock "github.com/stretchr/testify/mock"
)

// ExpenseToPaidTogglable is an autogenerated mock type for the ExpenseToPaidTogglable type
type ExpenseToPaidTogglable struct {
	mock.Mock
}

type ExpenseToPaidTogglable_Expecter struct {
	mock *mock.Mock
}

func (_m *ExpenseToPaidTogglable) EXPECT() *ExpenseToPaidTogglable_Expecter {
	return &ExpenseToPaidTogglable_Expecter{mock: &_m.Mock}
}

// ToggleIsPaid provides a mock function with given fields: ctx, input
func (_m *ExpenseToPaidTogglable) ToggleIsPaid(ctx context.Context, input *expenses.ToggleExpenseIsPaidInput) (*expenses.ToggleExpenseIsPaidOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 *expenses.ToggleExpenseIsPaidOutput
	if rf, ok := ret.Get(0).(func(context.Context, *expenses.ToggleExpenseIsPaidInput) *expenses.ToggleExpenseIsPaidOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expenses.ToggleExpenseIsPaidOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *expenses.ToggleExpenseIsPaidInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpenseToPaidTogglable_ToggleIsPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleIsPaid'
type ExpenseToPaidTogglable_ToggleIsPaid_Call struct {
	*mock.Call
}

// ToggleIsPaid is a helper method to define mock.On call
//   - ctx context.Context
//   - input *expenses.ToggleExpenseIsPaidInput
func (_e *ExpenseToPaidTogglable_Expecter) ToggleIsPaid(ctx interface{}, input interface{}) *ExpenseToPaidTogglable_ToggleIsPaid_Call {
	return &ExpenseToPaidTogglable_ToggleIsPaid_Call{Call: _e.mock.On("ToggleIsPaid", ctx, input)}
}

func (_c *ExpenseToPaidTogglable_ToggleIsPaid_Call) Run(run func(ctx context.Context, input *expenses.ToggleExpenseIsPaidInput)) *ExpenseToPaidTogglable_ToggleIsPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*expenses.ToggleExpenseIsPaidInput))
	})
	return _c
}

func (_c *ExpenseToPaidTogglable_ToggleIsPaid_Call) Return(_a0 *expenses.ToggleExpenseIsPaidOutput, _a1 error) *ExpenseToPaidTogglable_ToggleIsPaid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewExpenseToPaidTogglable interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpenseToPaidTogglable creates a new instance of ExpenseToPaidTogglable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpenseToPaidTogglable(t mockConstructorTestingTNewExpenseToPaidTogglable) *ExpenseToPaidTogglable {
	mock := &ExpenseToPaidTogglable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
