// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/manicar2093/expenses_api/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// LoginableByToken is an autogenerated mock type for the LoginableByToken type
type LoginableByToken struct {
	mock.Mock
}

type LoginableByToken_Expecter struct {
	mock *mock.Mock
}

func (_m *LoginableByToken) EXPECT() *LoginableByToken_Expecter {
	return &LoginableByToken_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, token
func (_m *LoginableByToken) Login(ctx context.Context, token string) (*auth.LoginOutput, error) {
	ret := _m.Called(ctx, token)

	var r0 *auth.LoginOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.LoginOutput); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginableByToken_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type LoginableByToken_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *LoginableByToken_Expecter) Login(ctx interface{}, token interface{}) *LoginableByToken_Login_Call {
	return &LoginableByToken_Login_Call{Call: _e.mock.On("Login", ctx, token)}
}

func (_c *LoginableByToken_Login_Call) Run(run func(ctx context.Context, token string)) *LoginableByToken_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LoginableByToken_Login_Call) Return(_a0 *auth.LoginOutput, _a1 error) *LoginableByToken_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewLoginableByToken interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginableByToken creates a new instance of LoginableByToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginableByToken(t mockConstructorTestingTNewLoginableByToken) *LoginableByToken {
	mock := &LoginableByToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
